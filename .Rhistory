c <- ggplot(data=d_sample, aes(x= cut, y= price, color=cut))+ geom_violin()
plot(c)
p <- ggplot(data=d_sample, aes(x= cut, y= price, color=cut))+ geom_violin()
plot(p)
p + geom_boxplot(width=0.1)
p + geom_boxplot(width=0.1)+ geom_jitter(size=0.5)
d_sample <- diamonds[seq(from=1, to=53000, by=1000),]
ggplot(d_sample, aes(cut, price))+geom_point()
ggplot(d_sample, aes(cut, price, color=cut))+geom_jitter()
ggplot(data=d_sample, aes(x=cut, y=price))+
geom_violin()
p <- ggplot(data=d_sample, aes(x= cut, y= price, color=cut))+ geom_violin()
plot(p)
p + geom_boxplot(width=0.1)+ geom_jitter(size=0.5)
p <- ggplot(data=d_sample, aes(x= cut, y= price, fill=cut))+ geom_violin()
plot(p)
p + geom_boxplot(width=0.1)+ geom_jitter(size=0.5)+
ggsave("voilinplot.pdf")
data("iris")
x <- prcomp(iris[ ,-5], center= TRUE, scale = TRUE)
print(x)
View(iris)
summary(x)
plot(x)
iris <- cbind(iris, x$x)
View(iris)
ggplot(iris, aes(PC1, PC2, col=iris$species, fill=iris$species))+
stat_ellipse(geom = "polygon")
ggplot(iris, aes(PC1, PC2, col=iris$species, fill=iris$species))+
stat_ellipse(geom = "polygon", col="black",
alpha=0.5)+
geom_point(shape=21, col="black")
ggplot(iris, aes(PC1, PC2, col=iris$species, fill=iris$species))+
stat_ellipse(geom = "polygon", col="black", alpha=0.5)+
geom_point(shape=21, col="black")
ggplot(iris, aes(PC1, PC2, col=species, fill=species))+
stat_ellipse(geom = "polygon", col="black", alpha=0.5)+
geom_point(shape=21, col="black")
ggplot(iris, aes(PC1, PC2, col=species, fill=species))+
stat_ellipse(geom = "polygon", col="black", alpha=0.5)+
geom_point(shape=21, col="black")
ggplot(iris, aes(PC1, PC2, col=species, fill=species))+
stat_ellipse(geom = "polygon", col="black", alpha=0.5)+
geom_point(shape=21, col="black")+
labs(x="PC1", y="PC2", title="PCA")
View(iris)
ggplot(iris, aes(PC1, PC2, col=iris$Species, fill=iris$Species))+
stat_ellipse(geom = "polygon", col="black", alpha=0.5)+
geom_point(shape=21, col="black")
install.packages("factoextra")
install.packages("FactoMineR")
library(factorextra)
library(factoextra)
library(FactoMineR)
iris.pcs <- PCA(iris[,-5], graph=TRUE, scale.unit=TRUE)
#screep plot #how much data is lying in the first 2 components
fviz_eig(iris.pcs, addlabels = TRUE)
#screep plot #how much data is lying in the first 2 components
fviz_eig(iris.pcs, addlabels = TRUE)
#scree plot #how much data is lying in the first 2 components
fviz_eig(iris.pcs, addlabels = TRUE, ylim=c(0,80))
fviz_pca_var(iris.pcs, col.var="cos2",
gradient.col= c("blue", "red"))
fviz_pca_var(iris.pcs, col.var="cos2",
gradient.col= c("blue", "red", "yellow", "green"),
repel=TRUE)
fviz_pca_var(iris.pcs, col.var="cos2",
gradient.col= c("blue", "red", "yellow", "green"),
repel=TRUE)
fviz_pca_var(iris.pcs, col.var="cos2",
gradient.col= c("blue", "red", "yellow", "green"),
repel=TRUE)+
labs(title = "pca", x="PC1 (49%)", y="PC2 (23.9%)",
colour = "cos2")+
ggsave("pca.pdf")
fviz_pca_var(iris.pcs, col.var="cos2",
gradient.col= c("blue", "red", "yellow", "green"),
repel=TRUE)+
labs(title = "pca", x="PC1 (49%)", y="PC2 (23.9%)",
colour = "cos2")+
ggsave("pca.pdf")
#scree plot #how much data is lying in the first 2 components
fviz_eig(iris.pcs, addlabels = TRUE, ylim=c(0,80))
fviz_pca_var(iris.pcs, col.var="cos2",
gradient.col= c("blue", "red", "yellow", "green"),
repel=TRUE)+
labs(title = "pca", x="PC1 (49%)", y="PC2 (23.9%)",
colour = "cos2")+
ggsave("pca.pdf")
fviz_pca_var(iris.pcs, col.var="cos2",
gradient.col= c("blue", "red", "yellow", "green"),
repel=TRUE)+
labs(title = "pca", x="PC1 (49%)", y="PC2 (23.9%)",
colour = "cos2")+
ggsave("pca.pdf")
ggplot(iris, aes(PC1, PC2, col=iris$Species, fill=iris$Species))+
stat_ellipse(geom = "polygon", col="black", alpha=0.5)+
geom_point(shape=21, col="black")
ggplot(iris, aes(PC1, PC2, col=iris$Species, fill=iris$Species))+
stat_ellipse(geom = "polygon", col="black", alpha=0.5)+
geom_point(shape=21, col="black")+
ggsave("pca_plot")
ggplot(iris, aes(PC1, PC2, col=iris$Species, fill=iris$Species))+
stat_ellipse(geom = "polygon", col="black", alpha=0.5)+
geom_point(shape=21, col="black")+
ggsave("pca_plot.pdf")
heatmap(mtcars)
#heatmap
x <- mtcars
heatmap(mtcars)
View(mtcars)
heatmap(x)
x <- as.matric(mtcars)
x <- as.matrix(mtcars)
x <- as.matrix(mtcars)
heatmap(x)
#heatmap
x <- mtcars
x <- as.matrix(mtcars)
heatmap(x)
heatmap(x, scale="column")
heatmap(x)
heatmap(x, scale="column")
#gplots
install.packages("gplots")
library(gplots)
heatmap.2(x, scale  = "column",
col = bluered(100))
heatmap.2(x, scale  = "column",
col = bluered(100),
trace = "none")
heatmap.2(x, scale  = "column",
col = bluered(100),
trace = "none")
?heatmap.2()
pheatmaps(x, scale = "column")
pheatmaps(x, scale = "column", cutree_rows = 3)
pheatmap(x, scale = "column", cutree_rows = 3)
library(pheatmap)
#pheatmaps
install.packages("pheatmap")
library(pheatmap)
pheatmap(x, scale = "column", cutree_rows = 3)
pheatmap(x, scale = "column", cutree_rows = 3)
pheatmap(x, scale = "column", cutree_rows = 4)
pheatmap(x, scale = "column", cutree_rows = 4)
pheatmap(x, scale = "column", cutree_rows = 4)
pheatmap(x, scale = "column")
heatmap(x, scale="column")
x <- as.matrix(mtcars)
heatmap(x, scale="column")
pheatmap(x, scale = "column", cutree_rows = 4, par("pin"=NULL))  # Reset 'pin' parameter
#heatmap
x <- mtcars
View(mtcars)
x <- as.matrix(mtcars)
heatmap(x, scale="column")
plot(heatmap)
plot(heatmap())
heatmap(x, scale="column")
library(gplots)
heatmap.2(x, scale  = "column",
col = bluered(100),
trace = "none")
plot(heatmap.2(x, scale = "column", col = bluered(100), trace = "none"))
heatmap.2(x, scale  = "column",
col = bluered(100),
trace = "none")
#heatmap
x <- mtcars
x <- as.matrix(mtcars)
heatmap(x, scale="column")
library(gplots)
heatmap.2(x, scale  = "column",
col = bluered(100),
trace = "none")
library(pheatmap)
pheatmap(x, scale = "column", cutree_rows = 4)  # Reset 'pin' parameter
pheatmap(x, scale = "column", cutree_rows = 4,
cutree_cols = 3, clustering_method = "ward.D2")
pheatmap(x, scale = "column", cutree_rows = 4,
cutree_cols = 3)
#ggplot2
library(ggplot2)
y <- iris
install.packages("reshape")
library(reshape)
y1 <- melt(iris)
View(y1)
View(y)
ggplot(y1, aes(y1$species, y1$variable, fill=y1$value))+
geom_tile()
ggplot(y1, aes(y1$species, y1$variable, fill=y1$value))+
geom_tile()
ggplot(y1, aes(y1$Species, y1$variable, fill=y1$value))+
geom_tile()
ggplot(y1, aes(y1$Species, y1$variable, fill=y1$value))+
geom_tile()+
scale_fill_gradient(low = "yellow", high = "green")
ggplot(y1, aes(y1$Species, y1$variable, fill=y1$value))+
geom_tile()+
scale_fill_gradient(low = "yellow", high = "blue")
#adding p value to boxplots
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggpval")
library(ggplot2)
library(ggpval)
data("ToothGrowth")
p <- ggplot(ToothGrowth) +
aes(x=supp, y=len, fill=supp)+
geom_boxplot(shape="circle", width=0.5)+
stat_boxplot(geom = 'errorbar', width=0.1)+
scale_fill_viridis_d(option = "inferno", direction = 1)+
labs(x = "Suplement", y = "Length", fill = "Suplement")+
ggthemes::theme_par()+
facet_wrap(vars(dose));p
library(ggthemes)
install.packages("ggthemes")
library(ggthemes)
data("ToothGrowth")
p <- ggplot(ToothGrowth) +
aes(x=supp, y=len, fill=supp)+
geom_boxplot(shape="circle", width=0.5)+
stat_boxplot(geom = 'errorbar', width=0.1)+
scale_fill_viridis_d(option = "inferno", direction = 1)+
labs(x = "Suplement", y = "Length", fill = "Suplement")+
ggthemes::theme_par()+
facet_wrap(vars(dose));p
#add p_value
add_pval(p, pairs = list(c(1,2)),
test = "t.test")
help("add_pval")
#add p_value
add_pval(p, pairs = list(c(1,2)),
test = "t.test")
install.packages("multcompView")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library(multcompView)
library(dplyr)
data("chickwts")
tibble(chickwts)
mean_data <- group_by(chickwts, feed) %>%
summarise(mean_weight = mean(weight), sd = sd(weigt)/sqrt() %>%
arrange(desc(mean_weight)))
mean_data <- group_by(chickwts, feed) %>%
summarise(mean_weight = mean(weight), sd = sd(weight)/sqrt() %>%
arrange(desc(mean_weight)))
tibble(mean_data)
tibble(mean_weight)
tibble(mean_data)
mean_data <- group_by(chickwts, feed) %>%
summarise(mean_weight = mean(weight), sd = sd(weight)/sqrt() %>%
arrange(desc(mean_weight)))
mean_data <- group_by(chickwts, feed) %>%
summarise(mean_weight = mean(weight), sd = sd(weight)) %>%
arrange(desc(mean_weight))
tibble(mean_data)
anova <- aov(weight ~ feed, data = chickwts)
summary(anova)
tukey <- TukeyHSD(anova)
tukey
group_letters <- multcompLetters4(anova, tukey)
group_letters
group_letters <- as.data.frame.list(group_letters$feed)
mean_data$group_letters <- group_letters$Letters
tibble(mean_data)
p <-ggplot(mean_data, aes(x=feed, y=mean_weight))+
geom_bar(stat="identity", aes(fill = feed), show.legend = FALSE, width = 0)+
geom_errorbar(aes(ymin=mean_weight-sd, ymax=mean_weight+sd), width=0.1)+
geom_text(aes(label=group_letters, y = mean_weight+sd), vjust=-0.4)+
scale_fill_brewer(pallete = "BrBG", direction = 1)+
labs(x="Feed", y="Mean weight", fill="Feed", title = "publication ready barplot", subtitle = "made by mehwish")+
ylim(0,410)+
ggthemes::theme_par(); p
library(ggplot2)
p <-ggplot(mean_data, aes(x=feed, y=mean_weight))+
geom_bar(stat="identity", aes(fill = feed), show.legend = FALSE, width = 0)+
geom_errorbar(aes(ymin=mean_weight-sd, ymax=mean_weight+sd), width=0.1)+
geom_text(aes(label=group_letters, y = mean_weight+sd), vjust=-0.4)+
scale_fill_brewer(pallete = "BrBG", direction = 1)+
labs(x="Feed", y="Mean weight", fill="Feed", title = "publication ready barplot", subtitle = "made by mehwish")+
ylim(0,410)+
ggthemes::theme_par(); p
p <-ggplot(mean_data, aes(x=feed, y=mean_weight))+
geom_bar(stat="identity", aes(fill = feed), show.legend = FALSE, width = 0)+
geom_errorbar(aes(ymin=mean_weight-sd, ymax=mean_weight+sd), width=0.1)+
geom_text(aes(label=group_letters, y = mean_weight+sd), vjust=-0.4)+
scale_fill_brewer(palette = "BrBG", direction = 1)+
labs(x="Feed", y="Mean weight", fill="Feed", title = "publication ready barplot", subtitle = "made by mehwish")+
ylim(0,410)+
ggthemes::theme_par(); p
p <-ggplot(mean_data, aes(x=feed, y=mean_weight))+
geom_bar(stat="identity", aes(fill = feed), show.legend = FALSE, width = 4)+
geom_errorbar(aes(ymin=mean_weight-sd, ymax=mean_weight+sd), width=0.1)+
geom_text(aes(label=group_letters, y = mean_weight+sd), vjust=-0.4)+
scale_fill_brewer(palette = "BrBG", direction = 1)+
labs(x="Feed", y="Mean weight", fill="Feed", title = "publication ready barplot", subtitle = "made by mehwish")+
ylim(0,410)+
ggthemes::theme_par(); p
p <-ggplot(mean_data, aes(x=feed, y=mean_weight))+
geom_bar(stat="identity", aes(fill = feed), show.legend = FALSE, width = 2)+
geom_errorbar(aes(ymin=mean_weight-sd, ymax=mean_weight+sd), width=0.1)+
geom_text(aes(label=group_letters, y = mean_weight+sd), vjust=-0.4)+
scale_fill_brewer(palette = "BrBG", direction = 1)+
labs(x="Feed", y="Mean weight", fill="Feed", title = "publication ready barplot", subtitle = "made by mehwish")+
ylim(0,410)+
ggthemes::theme_par(); p
p <-ggplot(mean_data, aes(x=feed, y=mean_weight))+
geom_bar(stat="identity", aes(fill = feed), show.legend = FALSE, width = 1)+
geom_errorbar(aes(ymin=mean_weight-sd, ymax=mean_weight+sd), width=0.1)+
geom_text(aes(label=group_letters, y = mean_weight+sd), vjust=-0.4)+
scale_fill_brewer(palette = "BrBG", direction = 1)+
labs(x="Feed", y="Mean weight", fill="Feed", title = "publication ready barplot", subtitle = "made by mehwish")+
ylim(0,410)+
ggthemes::theme_par(); p
p <-ggplot(mean_data, aes(x=feed, y=mean_weight))+
geom_bar(stat="identity", aes(fill = feed), show.legend = FALSE, width = 0.5)+
geom_errorbar(aes(ymin=mean_weight-sd, ymax=mean_weight+sd), width=0.1)+
geom_text(aes(label=group_letters, y = mean_weight+sd), vjust=-0.4)+
scale_fill_brewer(palette = "BrBG", direction = 1)+
labs(x="Feed", y="Mean weight", fill="Feed", title = "publication ready barplot", subtitle = "made by mehwish")+
ylim(0,410)+
ggthemes::theme_par(); p
p <-ggplot(mean_data, aes(x=feed, y=mean_weight))+
geom_bar(stat="identity", aes(fill = feed), show.legend = FALSE, width = 0.5)+
geom_errorbar(aes(ymin=mean_weight-sd, ymax=mean_weight+sd), width=0.1)+
geom_text(aes(label=group_letters, y = mean_weight+sd), vjust=-0.4)+
scale_fill_brewer(palette = "BrBG", direction = 1)+
labs(x="Feed", y="Mean weight", fill="Feed", title = "publication ready barplot", subtitle = "made by mehwish")+
ylim(0,410)+
ggthemes::theme_par(); p
p
tiff('barplot.tiff', units="in", width=10, height=6, res=300, compression='lzw')
p
dev.off()
#hierarchical clustering
pacman::p_load(pacman, dplyr, GGally, ggplot2, ggthemes, ggvis, httr, lubridate,
plotly, rio, rmarkdown, shiny, stringr, tidyr)
install.packages("bioconductor")
library(bioconductor)
BiocManager::install(version = "3.18")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.18")
BiocManager::version()
BiocManager::valid()
BiocManager::available()
BiocManager::install()
library(BiocManager)
install.packages("pacman")
pacman::p_load(pacman, dplyr, GGally, ggplot2, ggthemes, ggvis, httr, lubridate,
plotly, rio, rmarkdown, shiny, stringr, tidyr)
library(rio)
library(pacman)
library(datasets)
head(mtcars)
cars <- mtcars[,c(1:4,6:7,9:11)]
head(cars)
hc <- cars %>% dist() %>% hclust()
plot(hc)
rect.hclust(hc, k=2, border="red")
rect.hclust(hc, k=3, border="yellow")
rect.hclust(hc, k=4, border="green")
rect.hclust(hc, k=5, border="blue")
#save the plot
tiff('dendrogram.tiff', units="in", width=10, height=6, res=300, compression='lzw')
plot(hc)
tiff('dendrogram.tiff', units="in", width=10, height=6, res=300, compression='lzw')
plot(hc)
dev.off()
tiff('dendrogram1.tiff', units="in", width=10, height=6, res=300, compression='lzw')
rect.hclust(hc, k=2, border="red")
#save the plot with borders
tiff('dendrogram1.tiff', units="in", width=10, height=6, res=300, compression='lzw')
rect.hclust(hc, k=2, border="red")
rect.hclust(hc, k=3, border="yellow")
hc1 <- cars %>% dist() %>% hclust()
#save the plot with borders
tiff('dendrogram1.tiff', units="in", width=10, height=6, res=300, compression='lzw')
rect.hclust(hc1, k=2, border="red")
hc <- cars %>% dist() %>% hclust()
plot(hc) #dendrogram
rect.hclust(hc, k=2, border="red")
rect.hclust(hc, k=3, border="yellow")
rect.hclust(hc, k=4, border="green")
rect.hclust(hc, k=5, border="blue")
#save the plot
tiff('dendrogram.tiff', units="in", width=10, height=6, res=300, compression='lzw')
plot(hc)
dev.off()
#regression analysis
?USJudgeRatings
data <- USJudgeRatings
View(data)
x <- as.matrix(data[-12])
y <- as.matrix(data[, 12])
reg1 <- lm(y ~ x) #linear regression/model, y is outcome, x is predictor, tilda is used to show the relationship
summary(reg1)
#or specify variables individually
reg2 <- lm(CONT ~ INTG + DMNR + DILG + CFMG + DECI + PREP, data = USJudgeRatings)
#results
reg1 #coefficients of the model
summary(reg1) #summary of the model
confint(reg1) #confidence intervals
anova(reg1) #analysis of variance
coef(reg1) #coefficients
resid(reg1) #residuals
hist(resid(reg1)) #histogram of residuals
#conventional step wise regression
p_load(lars, caret)
stepwise <- lars(x, y, type = "stepwise")
#stage wise regression, better generalizibility
forward <- lars(x, y, type = "forward. stagewise")
#stage wise regression, better generalizibility
forward <- lars(x, y, type = "forward.stagewise")
#lar is least angle regression
lar <- lars(x, y, type = 'lar')
#lasso regression is used for variable selection, it is a shrinkage method, least absolute shrinkage and selection operator
lasso <- lars(x, y, type = "lasso")
r2comp <- c(stepwise$R2[6], forward$R2[6],
lar$R2[6], lasso$R2[6]) %>% round(2)
names(r2comp) <- c("stepwise", "forward", "lar", "lasso")
r2comp
#clear everything from the environment
rm(list=ls())
source("D:/Others/R basics course/r.R")
#installing packages
install.packages("psych")
installed.packages("corrplot")
install.packages("corrplot")
install.packages("RColorBrewer")
library(psych)
library(corrplot)
library(RColorBrewer)
#correlation matrix
data("iris")
x <- corr.test(iris[-5])
pairs.panels(iris[-5])
pairs.panels(iris[-5])
#save
tiff('correlation.tiff', units="in", width=10, height=6, res=300, compression='lzw')
#save
tiff('iriscorrelation.tiff', units="in", width=10, height=6, res=300, compression='lzw')
pairs.panels(iris[-5])
dev.off()
x <- corr.test(iris[-5])
x
#iris dataset
i <- data("iris")
head(i)
str(i)
#iris dataset
i <- datasets::iris
head(i)
str(i)
summary(i)
View(i)
corr <- cor(i[ , -1])
corr <- cor(i[, -1])
corr <- cor(i[,-5])
corrplot(corr)
corr <- cor(i[,-5])
corr <- cor(i[,-5])
corrplot(corr)
plot(corr)
corr <- cor(i[,-5])
corr
corrplot(corr, method="color", type="upper", order="hclust", tl.col="black", tl.srt=45)
library(psych)
library(corrplot)
library(RColorBrewer)
corr <- cor(i[,-5])
corr
corrplot(corr)
tiff('iris_correlation.tiff', units="in", width=10, height=6, res=300, compression='lzw')
corrplot(corr)
dev.off()
corrplot(corr, method = "number")
corrplot(corr, type = "upper")
corrplot(corr)
corrplot(corr, type = "upper") #upper triangle
corrplot(corr, type = "lower") #lower triangle
corrplot(corr, type = "upper", order = "hclust") #upper triangle with hierarchical clustering
?corrplot
corrplot(corr, type = "upper", order = "hclust", method = "pie")
corrplot(corr, type = "upper", order = "hclust", method = "pie",
col = brewer.pal(n = 8, name = "RdYlBu"))
corrplot.mixed(corr)
corrplot.mixed(corr, lower.col = "black", upper = "ellipse")
corrplot.mixed(corr, lower.col = "black", number.cex = 0.8)
corrplot.mixed(m, lower = "square", upper = "pie", tl)
corrplot.mixed(m, lower = "square", upper = "pie", tl.col = "Red")
corrplot.mixed(corr, lower = "square", upper = "pie", tl.col = "Red")
corrplot.mixed(corr, lower = "number", upper = "pie", tl.col = "red")
?cor
correlation <- cor(i[,-5], method = "spearman"))
correlation <- cor(i[,-5], method = "spearman")
View(correlation)
correlation
corrplot(correlation, method = "number")
corr <- cor(i[,-5]) # -5 is used to exclude the species column
corr #pearson correlation
corrplot(corr)
corrplot(corr, method = "number")
correlation <- cor(i[,-5], method = "spearman")
correlation
corrplot(correlation, method = "number")
